#!/bin/bash

workernodes=$1
k0sdir=~/Development/aberdeen/k0s
nginxdir=$k0sdir/nginx
nginxconf=$nginxdir/k0s-ext-lb-docker.conf
node=1
t_out=3

echo "starting controller node..."
docker run -d --name k0s-controller-1 --hostname k0s-controller-1 -v $k0sdir:/k0s --privileged -p 6443:6443 -v /var/lib/k0s k0sproject/k0s k0s controller -c /k0s/controller/controller.yaml

echo "allowing controller to warm up for 10 seconds..."
sleep ${t_out}

echo "getting worker token..."
token=$(docker exec -it k0s-controller-1 k0s token create --role=worker)

echo 'upstream workers {' > $nginxconf

while [ $node -le $workernodes ]
do
  echo "starting worker $node..."
  docker run -d --name k0s-worker-$node --hostname k0s-worker-$node --expose 80 --expose 443 --expose 10254 --privileged -v /var/lib/k0s k0sproject/k0s k0s worker $token
  echo -e "  server "$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' k0s-worker-$node)";" >> $nginxconf
  echo "letting worker $node warm up and join the cluster..."
  sleep ${t_out}
  let node++
done

echo "finish up the nginx config..."
cat >> $nginxconf << EOL
}

server {
  listen 80;
  server_name k0s.local;
  location / {
    proxy_pass http://workers;
  }
}
EOL

echo "starting up external nginx load balancer to the worker nodes..."
docker run -p 80:80 -v $nginxdir:/etc/nginx/conf.d --name k0s-ext-lb -d nginx

echo "snarfing up kubecfg and placing in .kube..."
config=$(docker exec k0s-controller-1 cat /var/lib/k0s/pki/admin.conf)
echo "$config" > ~/.kube/config
chmod 600 ~/.kube/config

echo "checking for helm..."
if ! command -v helm &> /dev/null
then
  echo "helm not installed or found in PATH, exiting..."
  exit
fi

echo "[helm] installing bitnami repository..."
helm repo add bitnami https://charts.bitnami.com/bitnami

echo "[helm] insalling nginx-ingress from bitnami..."
helm install nginx-ingress bitnami/nginx-ingress-controller --values $k0sdir/charts/nginx-ingress.yaml &> /dev/null
